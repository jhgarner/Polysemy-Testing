{-# LANGUAGE PartialTypeSignatures #-}
{-# LANGUAGE Strict #-}

import Control.Monad.State

tester :: MonadState a m => m ()
tester = modify' id

manyState :: _ -> IO ()
manyState =
  flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()
  . flip evalStateT ()

main :: IO ()
main = do
  manyState tester >>= print
